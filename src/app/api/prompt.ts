import { Category } from "@/types/category";
import { loadDataFromLocalStorage } from "@/utils/localStorage";
import {
  ChatCompletionMessageParam,
  ChatCompletionTool,
} from "openai/resources/index.mjs";

export const defaultErrorMessage = "Xin l·ªói, m√¨nh kh√¥ng hi·ªÉu.";

export const defaultCategory = [
  { id: 1, name: "Nh√† ·ªü", icon: "üè†" },
  { id: 2, name: "Giao th√¥ng", icon: "üöó" },
  { id: 3, name: "ƒÇn u·ªëng", icon: "üçî" },
  { id: 4, name: "C√° nh√¢n/S·ª©c kh·ªèe", icon: "üíä" },
  { id: 5, name: "Gi·∫£i tr√≠", icon: "üéÆ" },
  { id: 6, name: "Ti·∫øt ki·ªám/ƒê·∫ßu t∆∞", icon: "üí∞" },
  { id: 7, name: "N·ª£", icon: "üí≥" },
  { id: 8, name: "Kh√°c", icon: "üßæ" },
  { id: 9, name: "B·∫£o hi·ªÉm", icon: "üõ°Ô∏è" },
  { id: 10, name: "Du l·ªãch", icon: "‚úàÔ∏è" },
  { id: 11, name: "C√¥ng vi·ªác/Kinh doanh", icon: "üíº" },
];

export const initInitSystemMessage: ChatCompletionMessageParam = {
  role: "system",
  content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω t√†i ch√≠nh, b·∫°n c√≥ nhi·ªám v·ª•:
  - ghi ch√©p c√°c giao d·ªãch, ƒë∆∞a ra √Ω ki·∫øn v·ªÅ chi ph√≠ v√† t√≠nh to√°n chi ti√™u. 
  - B·∫°n c√≥ t√≠nh c√°ch hay ch√¢m bi·∫øn v√† kh√≥ t√≠nh.
  - Danh s√°ch ƒë·∫ßy ƒë·ªß: ${defaultCategory.map((item) => item.name).join(", ")}`,
};

export const tools: ChatCompletionTool[] = [
  {
    type: "function",
    function: {
      name: "add_expense",
      description:
        "Add an expense when the user provides an item and an amount (e.g., '30k c√† ph√™', 'ƒëi ch·ª£ 500k', '30 ng√†n ƒÉn s√°ng').\n" +
        "The amount can be in formats like '10k', '50 ng√†n', '500k', or full numbers like '500000'.\n" +
        "Never add an expense unless the item name and amount appear in the same user input.\n" +
        "Never add an expense unless the mount is not correct format\n" +
        "Extract the numeric amount and the item name. Always assign a category based on known mappings.\n" +
        "If an item isn't in the mapping, assign 'Kh√°c'.\n" +
        "Examples:\n" +
        "- '50k ƒÉn s√°ng' ‚Üí item: 'ƒÉn s√°ng', amount: 50000, category: 'ƒÇn u·ªëng'\n" +
        "- '200k xƒÉng' ‚Üí item: 'xƒÉng', amount: 200000, category: 'Giao th√¥ng'\n" +
        "- '10k n∆∞·ªõc' ‚Üí item: 'n∆∞·ªõc', amount: 10000, category: 'Kh√°c'\n",
      parameters: {
        type: "object",
        properties: {
          item: { type: "string", description: "The name of the item." },
          amount: {
            type: "number",
            description:
              "The cost of the item in Vietnam dong. Example: '30k' = 30000.",
          },
          category: {
            type: "string",
            description:
              "The category of the expense, automatically assigned based on keywords in the item name.",
          },
        },
        required: ["item", "amount"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "delete_expense",
      description:
        "Delete an expense to the user's account. Just delete when user provide fully item and amount. When user provide only item, confirm deletion.",
      parameters: {
        type: "object",
        properties: {
          item: { type: "string", description: "The name of the item." },
          amount: {
            type: "number",
            description: "The cost of the item in vietnam dong.",
          },
        },
        required: ["item", "amount"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "add_income",
      description:
        "Record an income when the user provides an amount and a source (e.g., 'L∆∞∆°ng th√°ng 10 20 tri·ªáu', 'ti·ªÅn th∆∞·ªüng 5 tri·ªáu', '50 tri·ªáu ƒë·∫ßu t∆∞').\n" +
        "The amount can be in formats like '10k', '50 ng√†n', '500k', or full numbers like '500000'.\n" +
        "Never add an expense unless the item name and amount appear in the same user input.\n" +
        "Extract the numeric amount and the item name. Always assign a category based on known mappings.\n" +
        "If an item isn't in the mapping, assign 'Kh√°c'.\n" +
        "Example mappings:\n" +
        "- 'qu·ªπ', 'l∆∞∆°ng', 'l∆∞∆°ng th√°ng', 'ti·ªÅn c√¥ng' ‚Üí 'L∆∞∆°ng' üíº\n" +
        "- 'ti·ªÅn th∆∞·ªüng', 'bonus' ‚Üí 'Th∆∞·ªüng' üéÅ\n" +
        "- 'ƒë·∫ßu t∆∞', 'c·ªï t·ª©c', 'ch·ª©ng kho√°n' ‚Üí 'ƒê·∫ßu t∆∞' üìà\n" +
        "- 'b√°n h√†ng', 'kinh doanh', 'thu nh·∫≠p th√™m' ‚Üí 'Kinh doanh' üè™\n" +
        "- 'qu·ªπ', 'ti·ªÅn l√£i', 'ti·∫øt ki·ªám' ‚Üí 'Ti·∫øt ki·ªám/ƒê·∫ßu t∆∞' üí∞\n" +
        "- Anything unrecognized ‚Üí 'Kh√°c' üßæ",
      parameters: {
        type: "object",
        properties: {
          item: {
            type: "string",
            description: "The source of the income (e.g., salary, bonus).",
          },
          amount: {
            type: "number",
            description:
              "The amount of income in Vietnam dong. Example: '5 tri·ªáu' = 5000000.",
          },
          category: {
            type: "string",
            description:
              "The category of the income, always assigned based on keywords in the item name.",
          },
        },
        required: ["item", "amount"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "delete_income",
      description:
        "Delete an income from the user's account. Just delete when user provide fully source and amount. When user provide only source, confirm deletion.",
      parameters: {
        type: "object",
        properties: {
          source: {
            type: "string",
            description: "The source of the income (e.g., salary, bonus).",
          },
          amount: {
            type: "number",
            description:
              "The amount of income in Vietnam dong. Example: '5 tri·ªáu' = 5000000.",
          },
        },
        required: ["source", "amount"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "calculate_income",
      description:
        "Calculate the total amount the user has earned based on a specified time range.",
      parameters: {
        type: "object",
        properties: {
          range: {
            type: "string",
            description:
              "The time range to calculate. Options: 'today', 'last_day', 'this_month', 'last_month', or 'custom'.",
          },
          start_date: {
            type: "string",
            format: "date-time",
            description:
              "The start date for a custom range, in ISO 8601 format (e.g., '2023-01-01T00:00:00Z'). Required if range is 'custom'.",
          },
          end_date: {
            type: "string",
            format: "date-time",
            description:
              "The end date for a custom range, in ISO 8601 format (e.g., '2023-01-31T23:59:59Z'). Required if range is 'custom'.",
          },
        },
        required: ["range"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "calculate_spent",
      description:
        "Calculate the total amount the user has spent based on a specified time range.",
      parameters: {
        type: "object",
        properties: {
          range: {
            type: "string",
            description:
              "The time range to calculate. Options: 'today', 'last_day', 'this_month', 'last_month', or 'custom'.",
          },
          start_date: {
            type: "string",
            format: "date-time",
            description:
              "The start date for a custom range, in ISO 8601 format (e.g., '2023-01-01T00:00:00Z'). Required if range is 'custom'.",
          },
          end_date: {
            type: "string",
            format: "date-time",
            description:
              "The end date for a custom range, in ISO 8601 format (e.g., '2023-01-31T23:59:59Z'). Required if range is 'custom'.",
          },
        },
        required: ["range"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "give_opinion_on_cost",
      description:
        "Provide an opinion on whether the cost of an item is reasonable.",
    },
  },
];
